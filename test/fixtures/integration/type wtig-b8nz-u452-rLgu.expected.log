Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
[0J────────────────────────────────────────────────────────────────────────────────

Given the following type declarations:

    public interface OalRinstar {
        public OalRinstar outo(OalRinstar ofui);
    }

    public class Detpha implements OalRinstar {
        public OalRinstar outo(OalRinstar ofui) {
            return new Detpha();
        }
    }

    public class NacCisa implements OalRinstar {
        public OalRinstar outo(OalRinstar ofui) {
            return this;
        }
    }

...and given the following setup code:

    OalRinstar foo = new NacCisa();
    OalRinstar bar = new Detpha();

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 1   [0m
[1m[38;5;16m[48;5;207m            [0m

Draw an AST for the following expression, labeling the [1mstatic type[22m (a.k.a.
[1mcompile-time type[22m) of each node in the tree:

    foo.outo(bar.outo(bar))

(The static type of an expression is the type that the compiler uses to check
the code [3mbefore[23m it runs.)

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

[3m<< See window titled “Part 1 Solution” >>[23m

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 2   [0m
[1m[38;5;16m[48;5;227m            [0m

Draw an AST for the same expression, this time labeling the [1mruntime type[22m of each
node in the tree.

(The runtime type of an expression is the type of the actual value that appears
when the code runs.)

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

[3m<< See window titled “Part 2 Solution” >>[23m

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

Given the following type declarations:

    public interface Macas {
        public Macas baad(Macas di);
    }

    public class Broe implements Macas {
        public Macas baad(Macas di) {
            return new Eont();
        }
    }

    public class Eont implements Macas {
        public Macas baad(Macas di) {
            return di;
        }
    }

...and given the following setup code:

    Macas foo = new Broe();
    Eont bar = new Eont();

[1m[38;5;16m[48;5;75m            [0m
[1m[38;5;16m[48;5;75m   PART 1   [0m
[1m[38;5;16m[48;5;75m            [0m

Draw an AST for the following expression, labeling the [1mstatic type[22m (a.k.a.
[1mcompile-time type[22m) of each node in the tree:

    foo.baad(bar).baad(bar)

(The static type of an expression is the type that the compiler uses to check
the code [3mbefore[23m it runs.)

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

[3m<< See window titled “Part 1 Solution” >>[23m

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;204m            [0m
[1m[38;5;16m[48;5;204m   PART 2   [0m
[1m[38;5;16m[48;5;204m            [0m

Draw an AST for the same expression, this time labeling the [1mruntime type[22m of each
node in the tree.

(The runtime type of an expression is the type of the actual value that appears
when the code runs.)

[1m[38;5;211m[48;5;52m              [0m
[1m[38;5;211m[48;5;52m   SOLUTION   [0m
[1m[38;5;211m[48;5;52m              [0m

[3m<< See window titled “Part 2 Solution” >>[23m

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

Given the following type declarations:

    public interface Spodga {
        public Spodga obuCleng(Spodga o);
    }

    public class Bioum implements Spodga {
        public Spodga obuCleng(Spodga o) {
            return o;
        }
    }

    public class UalPhlusprer implements Spodga {
        public Spodga obuCleng(Spodga o) {
            return new Bioum();
        }
    }

...and given the following setup code:

    Spodga foo = new Bioum();
    Spodga bar = new UalPhlusprer();

[1m[38;5;16m[48;5;83m            [0m
[1m[38;5;16m[48;5;83m   PART 1   [0m
[1m[38;5;16m[48;5;83m            [0m

Draw an AST for the following expression, labeling the [1mstatic type[22m (a.k.a.
[1mcompile-time type[22m) of each node in the tree:

    foo.obuCleng(bar.obuCleng(bar))

(The static type of an expression is the type that the compiler uses to check
the code [3mbefore[23m it runs.)

[1m[38;5;120m[48;5;22m              [0m
[1m[38;5;120m[48;5;22m   SOLUTION   [0m
[1m[38;5;120m[48;5;22m              [0m

[3m<< See window titled “Part 1 Solution” >>[23m

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;99m            [0m
[1m[38;5;16m[48;5;99m   PART 2   [0m
[1m[38;5;16m[48;5;99m            [0m

Draw an AST for the same expression, this time labeling the [1mruntime type[22m of each
node in the tree.

(The runtime type of an expression is the type of the actual value that appears
when the code runs.)

[1m[38;5;141m[48;5;17m              [0m
[1m[38;5;141m[48;5;17m   SOLUTION   [0m
[1m[38;5;141m[48;5;17m              [0m

[3m<< See window titled “Part 2 Solution” >>[23m

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

Given the following type declarations:

    public interface Cedfal {
        public Cedfal ediPura(Cedfal pse);
    }

    public class Bodweu implements Cedfal {
        public Cedfal ediPura(Cedfal pse) {
            return new Bodweu();
        }
    }

    public class BeuScrilda implements Cedfal {
        public Cedfal ediPura(Cedfal pse) {
            return this;
        }
    }

...and given the following setup code:

    Cedfal foo = new Bodweu();
    Cedfal bar = new BeuScrilda();

[1m[38;5;16m[48;5;221m            [0m
[1m[38;5;16m[48;5;221m   PART 1   [0m
[1m[38;5;16m[48;5;221m            [0m

Draw an AST for the following expression, labeling the [1mstatic type[22m (a.k.a.
[1mcompile-time type[22m) of each node in the tree:

    foo.ediPura(bar).ediPura(bar)

(The static type of an expression is the type that the compiler uses to check
the code [3mbefore[23m it runs.)

[1m[38;5;222m[48;5;52m              [0m
[1m[38;5;222m[48;5;52m   SOLUTION   [0m
[1m[38;5;222m[48;5;52m              [0m

[3m<< See window titled “Part 1 Solution” >>[23m

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;87m            [0m
[1m[38;5;16m[48;5;87m   PART 2   [0m
[1m[38;5;16m[48;5;87m            [0m

Draw an AST for the same expression, this time labeling the [1mruntime type[22m of each
node in the tree.

(The runtime type of an expression is the type of the actual value that appears
when the code runs.)

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

[3m<< See window titled “Part 2 Solution” >>[23m

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

Given the following type declarations:

    public class Rila {
        public Rila ciflio(Rila en) {
            return new Sasjou();
        }
    }

    public class Sasjou extends Rila {
        public Rila ciflio(Rila en) {
            return en;
        }
    }

    public class Flatro extends Rila {
        public Rila ciflio(Rila en) {
            return this;
        }
    }

...and given the following setup code:

    Rila foo = new Sasjou();
    Flatro bar = new Flatro();

[1m[38;5;16m[48;5;206m            [0m
[1m[38;5;16m[48;5;206m   PART 1   [0m
[1m[38;5;16m[48;5;206m            [0m

Draw an AST for the following expression, labeling the [1mstatic type[22m (a.k.a.
[1mcompile-time type[22m) of each node in the tree:

    foo.ciflio(foo.ciflio(bar))

(The static type of an expression is the type that the compiler uses to check
the code [3mbefore[23m it runs.)

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

[3m<< See window titled “Part 1 Solution” >>[23m

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;155m            [0m
[1m[38;5;16m[48;5;155m   PART 2   [0m
[1m[38;5;16m[48;5;155m            [0m

Draw an AST for the same expression, this time labeling the [1mruntime type[22m of each
node in the tree.

(The runtime type of an expression is the type of the actual value that appears
when the code runs.)

[1m[38;5;192m[48;5;22m              [0m
[1m[38;5;192m[48;5;22m   SOLUTION   [0m
[1m[38;5;192m[48;5;22m              [0m

[3m<< See window titled “Part 2 Solution” >>[23m

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

Given the following type declarations:

    public class Ronen {
        public Ronen tril(Ronen ipas) {
            return ipas;
        }
    }

    public class CioBian extends Ronen {
        public Ronen tril(Ronen ipas) {
            return this;
        }
    }

    public class Ripsalt extends Ronen {
        public Ronen tril(Ronen ipas) {
            return new Ripsalt();
        }
    }

...and given the following setup code:

    Ronen foo = new Ripsalt();
    Ronen bar = new CioBian();

[1m[38;5;16m[48;5;69m            [0m
[1m[38;5;16m[48;5;69m   PART 1   [0m
[1m[38;5;16m[48;5;69m            [0m

Draw an AST for the following expression, labeling the [1mstatic type[22m (a.k.a.
[1mcompile-time type[22m) of each node in the tree:

    foo.tril(foo.tril(bar))

(The static type of an expression is the type that the compiler uses to check
the code [3mbefore[23m it runs.)

[1m[38;5;111m[48;5;17m              [0m
[1m[38;5;111m[48;5;17m   SOLUTION   [0m
[1m[38;5;111m[48;5;17m              [0m

[3m<< See window titled “Part 1 Solution” >>[23m

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;203m            [0m
[1m[38;5;16m[48;5;203m   PART 2   [0m
[1m[38;5;16m[48;5;203m            [0m

Draw an AST for the same expression, this time labeling the [1mruntime type[22m of each
node in the tree.

(The runtime type of an expression is the type of the actual value that appears
when the code runs.)

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

[3m<< See window titled “Part 2 Solution” >>[23m

────────────────────────────────────────────────────────────────────────────────

[0m
