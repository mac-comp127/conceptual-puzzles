Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
[0J────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 1   [0m
[1m[38;5;16m[48;5;86m            [0m

Translate the following while loop into a for loop:

    int he = 95;
    while (he < popa) {
        ploTion();
        perpra(he);
        he--;
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    for (int he = 95; he < popa; he--) {
        ploTion();
        perpra(he);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 2   [0m
[1m[38;5;16m[48;5;207m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mmic[24m of type [4mlong[24m, initialized to [4mqit[24m. Then, until
  │ [4mmic[24m is less than or equal to [4moctja[24m, multiply [4mmic[24m by [4m3[24m.

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    for (long mic = qit; mic > octja; mic *= 3) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mmic > octja[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;191m            [0m
[1m[38;5;16m[48;5;191m   PART 3   [0m
[1m[38;5;16m[48;5;191m            [0m

Translate the following loop into a for-each loop:

    List<Trushi> herus;
    ...

    for (int i = 0; i < herus.size(); i++) {
        sedi(saspe, herus.get(i));
        sedsma(herus.get(i));
        tinpan(-2);
    }

[1m[38;5;192m[48;5;22m              [0m
[1m[38;5;192m[48;5;22m   SOLUTION   [0m
[1m[38;5;192m[48;5;22m              [0m

    for (Trushi heru : herus) {
        sedi(saspe, heru);
        sedsma(heru);
        tinpan(-2);
    }

It is OK if you gave the variable for the individual collection element ([4mheru[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;69m            [0m
[1m[38;5;16m[48;5;69m   PART 1   [0m
[1m[38;5;16m[48;5;69m            [0m

Translate the following for loop into a while loop:

    for (int snac = 21; snac < hante; snac *= 3) {
        plin();
        tesasm(snac, 6);
    }

[1m[38;5;111m[48;5;17m              [0m
[1m[38;5;111m[48;5;17m   SOLUTION   [0m
[1m[38;5;111m[48;5;17m              [0m

    int snac = 21;
    while (snac < hante) {
        plin();
        tesasm(snac, 6);
        snac *= 3;
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;203m            [0m
[1m[38;5;16m[48;5;203m   PART 2   [0m
[1m[38;5;16m[48;5;203m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mtoci[24m of type [4mint[24m, initialized to [4mtiss[24m. Then, until
  │ [4mtoci[24m equals [4mbomou[24m, decrement [4mtoci[24m.

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    for (int toci = tiss; toci != bomou; toci--) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mtoci != bomou[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;84m            [0m
[1m[38;5;16m[48;5;84m   PART 3   [0m
[1m[38;5;16m[48;5;84m            [0m

Translate the following loop into a for-each loop:

    Moshde[] focs;
    ...

    for (int i = 0; i < focs.length; i++) {
        focs[i].draras(naru, ilsod);
        raaPhol();
        focs[i].dihdra(-1);
    }

[1m[38;5;121m[48;5;22m              [0m
[1m[38;5;121m[48;5;22m   SOLUTION   [0m
[1m[38;5;121m[48;5;22m              [0m

    for (Moshde foc : focs) {
        foc.draras(naru, ilsod);
        raaPhol();
        foc.dihdra(-1);
    }

It is OK if you gave the variable for the individual collection element ([4mfoc[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;135m            [0m
[1m[38;5;16m[48;5;135m   PART 1   [0m
[1m[38;5;16m[48;5;135m            [0m

Translate the following while loop into a for loop:

    int jis = ce;
    while (jis < crir) {
        mulri();
        dued(jis);
        jis++;
    }

[1m[38;5;177m[48;5;17m              [0m
[1m[38;5;177m[48;5;17m   SOLUTION   [0m
[1m[38;5;177m[48;5;17m              [0m

    for (int jis = ce; jis < crir; jis++) {
        mulri();
        dued(jis);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 2   [0m
[1m[38;5;16m[48;5;227m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mba[24m of type [4mdouble[24m, initialized to [4meim[24m. Then, until
  │ [4mba[24m is less than [4mvesm[24m, increment [4mba[24m.

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    for (double ba = eim; ba >= vesm; ba++) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mba >= vesm[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;87m            [0m
[1m[38;5;16m[48;5;87m   PART 3   [0m
[1m[38;5;16m[48;5;87m            [0m

Translate the following loop into a for-each loop:

    List<Molco> crons;
    ...

    for (int n = 0; n < crons.size(); n++) {
        crons.get(n).preel();
        crons.get(n).praMamia(9);
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    for (Molco cron : crons) {
        cron.preel();
        cron.praMamia(9);
    }

It is OK if you gave the variable for the individual collection element ([4mcron[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;205m            [0m
[1m[38;5;16m[48;5;205m   PART 1   [0m
[1m[38;5;16m[48;5;205m            [0m

Translate the following for loop into a while loop:

    for (short o = 15; o < tre; o += 2) {
        neten();
        issCim(o, 42);
    }

[1m[38;5;212m[48;5;52m              [0m
[1m[38;5;212m[48;5;52m   SOLUTION   [0m
[1m[38;5;212m[48;5;52m              [0m

    short o = 15;
    while (o < tre) {
        neten();
        issCim(o, 42);
        o += 2;
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;119m            [0m
[1m[38;5;16m[48;5;119m   PART 2   [0m
[1m[38;5;16m[48;5;119m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4men[24m of type [4mshort[24m, initialized to [4m30[24m. Then, until [4men[24m
  │ is greater than or equal to [4moism[24m, increment [4men[24m.

[1m[38;5;156m[48;5;22m              [0m
[1m[38;5;156m[48;5;22m   SOLUTION   [0m
[1m[38;5;156m[48;5;22m              [0m

    for (short en = 30; en < oism; en++) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4men < oism[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;63m            [0m
[1m[38;5;16m[48;5;63m   PART 3   [0m
[1m[38;5;16m[48;5;63m            [0m

Translate the following loop into a for-each loop:

    List<OsVaLeeroa> tias;
    ...

    for (int n = 0; n < tias.size(); n++) {
        deuiam(2, tias.get(n), 3);
        bulul(tias.get(n), spha);
    }

[1m[38;5;105m[48;5;17m              [0m
[1m[38;5;105m[48;5;17m   SOLUTION   [0m
[1m[38;5;105m[48;5;17m              [0m

    for (OsVaLeeroa tia : tias) {
        deuiam(2, tia, 3);
        bulul(tia, spha);
    }

It is OK if you gave the variable for the individual collection element ([4mtia[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;209m            [0m
[1m[38;5;16m[48;5;209m   PART 1   [0m
[1m[38;5;16m[48;5;209m            [0m

Translate the following while loop into a for loop:

    int icca = in;
    while (icca <= phe) {
        canmid(icca, 21);
        icca++;
    }

[1m[38;5;216m[48;5;52m              [0m
[1m[38;5;216m[48;5;52m   SOLUTION   [0m
[1m[38;5;216m[48;5;52m              [0m

    for (int icca = in; icca <= phe; icca++) {
        canmid(icca, 21);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 2   [0m
[1m[38;5;16m[48;5;86m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mong[24m of type [4mint[24m, initialized to [4m68[24m. Then, until [4mong[24m
  │ is greater than or equal to [4mimPoli[24m, multiply [4mong[24m by [4m3[24m.

[1m[38;5;122m[48;5;22m              [0m
[1m[38;5;122m[48;5;22m   SOLUTION   [0m
[1m[38;5;122m[48;5;22m              [0m

    for (int ong = 68; ong < imPoli; ong *= 3) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mong < imPoli[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 3   [0m
[1m[38;5;16m[48;5;207m            [0m

Translate the following loop into a for-each loop:

    MiViosur[] splis;
    ...

    for (int i = 0; i < splis.length; i++) {
        biccre();
        splis[i].cunen();
        splis[i].piea(8, heshar);
        dagn(2);
    }

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    for (MiViosur spli : splis) {
        biccre();
        spli.cunen();
        spli.piea(8, heshar);
        dagn(2);
    }

It is OK if you gave the variable for the individual collection element ([4mspli[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 1   [0m
[1m[38;5;16m[48;5;227m            [0m

Translate the following while loop into a for loop:

    int kod = se;
    while (kod < desta) {
        issboc();
        gesm(kod);
        kod++;
    }

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    for (int kod = se; kod < desta; kod++) {
        issboc();
        gesm(kod);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;75m            [0m
[1m[38;5;16m[48;5;75m   PART 2   [0m
[1m[38;5;16m[48;5;75m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4msa[24m of type [4mint[24m, initialized to [4mu[24m. Then, until [4msa[24m is
  │ greater than or equal to [4mcolse[24m, decrement [4msa[24m.

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

    for (int sa = u; sa < colse; sa--) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4msa < colse[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;204m            [0m
[1m[38;5;16m[48;5;204m   PART 3   [0m
[1m[38;5;16m[48;5;204m            [0m

Translate the following loop into a for-each loop:

    List<AngMadmos> nesms;
    ...

    for (int n = 0; n < nesms.size(); n++) {
        nesms.get(n).clesi();
        waphro(-1);
        flos(7, vasmro, nesms.get(n));
    }

[1m[38;5;211m[48;5;52m              [0m
[1m[38;5;211m[48;5;52m   SOLUTION   [0m
[1m[38;5;211m[48;5;52m              [0m

    for (AngMadmos nesm : nesms) {
        nesm.clesi();
        waphro(-1);
        flos(7, vasmro, nesm);
    }

It is OK if you gave the variable for the individual collection element ([4mnesm[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

[0m
