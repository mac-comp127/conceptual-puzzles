Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
[0J────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 1   [0m
[1m[38;5;16m[48;5;86m            [0m

Translate the following while loop into a for loop:

    int he = 95;
    while (he < popa) {
        ploTion();
        perpra(he);
        he--;
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    for (int he = 95; he < popa; he--) {
        ploTion();
        perpra(he);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 2   [0m
[1m[38;5;16m[48;5;207m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mmic[24m of type [4mlong[24m, initialized to [4mqit[24m. Then, until
  │ [4mmic[24m is less than or equal to [4moctja[24m, multiply [4mmic[24m by [4m3[24m.

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    for (long mic = qit; mic > octja; mic *= 3) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mmic > octja[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;191m            [0m
[1m[38;5;16m[48;5;191m   PART 3   [0m
[1m[38;5;16m[48;5;191m            [0m

Translate the following loop into a for-each loop:

    List<Trushi> herus;
    ...

    for (int i = 0; i < herus.size(); i++) {
        sedi(saspe, herus.get(i));
        sedsma(herus.get(i));
        tinpan(-2);
    }

[1m[38;5;192m[48;5;22m              [0m
[1m[38;5;192m[48;5;22m   SOLUTION   [0m
[1m[38;5;192m[48;5;22m              [0m

    for (Trushi heru : herus) {
        sedi(saspe, heru);
        sedsma(heru);
        tinpan(-2);
    }

It is OK if you gave the variable for the individual collection element ([4mheru[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;69m            [0m
[1m[38;5;16m[48;5;69m   PART 1   [0m
[1m[38;5;16m[48;5;69m            [0m

Translate the following for loop into a while loop:

    for (int snac = 21; snac < hante; snac *= 3) {
        plin();
        tesasm(snac, 6);
    }

[1m[38;5;111m[48;5;17m              [0m
[1m[38;5;111m[48;5;17m   SOLUTION   [0m
[1m[38;5;111m[48;5;17m              [0m

    int snac = 21;
    while (snac < hante) {
        plin();
        tesasm(snac, 6);
        snac *= 3;
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;203m            [0m
[1m[38;5;16m[48;5;203m   PART 2   [0m
[1m[38;5;16m[48;5;203m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mtoci[24m of type [4mint[24m, initialized to [4mtiss[24m. Then, until
  │ [4mtoci[24m equals [4mbomou[24m, decrement [4mtoci[24m.

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    for (int toci = tiss; toci != bomou; toci--) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mtoci != bomou[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;84m            [0m
[1m[38;5;16m[48;5;84m   PART 3   [0m
[1m[38;5;16m[48;5;84m            [0m

Translate the following loop into a for-each loop:

    Moshde[] focs;
    ...

    for (int i = 0; i < focs.length; i++) {
        focs[i].draras(naru, ilsod);
        raaPhol();
        focs[i].dihdra(-1);
    }

[1m[38;5;121m[48;5;22m              [0m
[1m[38;5;121m[48;5;22m   SOLUTION   [0m
[1m[38;5;121m[48;5;22m              [0m

    for (Moshde foc : focs) {
        foc.draras(naru, ilsod);
        raaPhol();
        foc.dihdra(-1);
    }

It is OK if you gave the variable for the individual collection element ([4mfoc[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;135m            [0m
[1m[38;5;16m[48;5;135m   PART 1   [0m
[1m[38;5;16m[48;5;135m            [0m

Translate the following while loop into a for loop:

    int jis = ce;
    while (jis < crir) {
        mulri();
        dued(jis);
        jis++;
    }

[1m[38;5;177m[48;5;17m              [0m
[1m[38;5;177m[48;5;17m   SOLUTION   [0m
[1m[38;5;177m[48;5;17m              [0m

    for (int jis = ce; jis < crir; jis++) {
        mulri();
        dued(jis);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 2   [0m
[1m[38;5;16m[48;5;227m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mba[24m of type [4mdouble[24m, initialized to [4meim[24m. Then, until
  │ [4mba[24m is less than [4mvesm[24m, increment [4mba[24m.

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    for (double ba = eim; ba >= vesm; ba++) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mba >= vesm[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;87m            [0m
[1m[38;5;16m[48;5;87m   PART 3   [0m
[1m[38;5;16m[48;5;87m            [0m

Translate the following loop into a for-each loop:

    List<Molco> crons;
    ...

    for (int n = 0; n < crons.size(); n++) {
        crons.get(n).preel();
        crons.get(n).praMamia(9);
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    for (Molco cron : crons) {
        cron.preel();
        cron.praMamia(9);
    }

It is OK if you gave the variable for the individual collection element ([4mcron[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;205m            [0m
[1m[38;5;16m[48;5;205m   PART 1   [0m
[1m[38;5;16m[48;5;205m            [0m

Translate the following for loop into a while loop:

    for (short pivi = 67; pivi <= mucas; pivi *= 3) {
        vossad();
        riass(pivi);
    }

[1m[38;5;212m[48;5;52m              [0m
[1m[38;5;212m[48;5;52m   SOLUTION   [0m
[1m[38;5;212m[48;5;52m              [0m

    short pivi = 67;
    while (pivi <= mucas) {
        vossad();
        riass(pivi);
        pivi *= 3;
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;119m            [0m
[1m[38;5;16m[48;5;119m   PART 2   [0m
[1m[38;5;16m[48;5;119m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mos[24m of type [4mdouble[24m, initialized to [4m33[24m. Then, until
  │ [4mos[24m is greater than [4masmi[24m, divide [4mos[24m by [4m2[24m.

[1m[38;5;156m[48;5;22m              [0m
[1m[38;5;156m[48;5;22m   SOLUTION   [0m
[1m[38;5;156m[48;5;22m              [0m

    for (double os = 33; os <= asmi; os /= 2) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mos <= asmi[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;63m            [0m
[1m[38;5;16m[48;5;63m   PART 3   [0m
[1m[38;5;16m[48;5;63m            [0m

Translate the following loop into a for-each loop:

    List<SkeiEr> elpis;
    ...

    for (int n = 0; n < elpis.size(); n++) {
        sose(elpis.get(n));
        elpis.get(n).urmess();
        dilmal();
    }

[1m[38;5;105m[48;5;17m              [0m
[1m[38;5;105m[48;5;17m   SOLUTION   [0m
[1m[38;5;105m[48;5;17m              [0m

    for (SkeiEr elpi : elpis) {
        sose(elpi);
        elpi.urmess();
        dilmal();
    }

It is OK if you gave the variable for the individual collection element ([4melpi[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;209m            [0m
[1m[38;5;16m[48;5;209m   PART 1   [0m
[1m[38;5;16m[48;5;209m            [0m

Translate the following for loop into a while loop:

    for (long cus = scas; cus >= enXoc; cus--) {
        touct();
        wred(cus, 19);
    }

[1m[38;5;216m[48;5;52m              [0m
[1m[38;5;216m[48;5;52m   SOLUTION   [0m
[1m[38;5;216m[48;5;52m              [0m

    long cus = scas;
    while (cus >= enXoc) {
        touct();
        wred(cus, 19);
        cus--;
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 2   [0m
[1m[38;5;16m[48;5;86m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mtren[24m of type [4mint[24m, initialized to [4m41[24m. Then, until
  │ [4mtren[24m is greater than or equal to [4mdonct[24m, multiply [4mtren[24m by [4m4[24m.

[1m[38;5;122m[48;5;22m              [0m
[1m[38;5;122m[48;5;22m   SOLUTION   [0m
[1m[38;5;122m[48;5;22m              [0m

    for (int tren = 41; tren < donct; tren *= 4) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mtren < donct[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 3   [0m
[1m[38;5;16m[48;5;207m            [0m

Translate the following loop into a for-each loop:

    List<FexTalcost> trers;
    ...

    for (int i = 0; i < trers.size(); i++) {
        ostPhro(womLontde, trers.get(i));
        trers.get(i).angMadmos(9);
    }

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    for (FexTalcost trer : trers) {
        ostPhro(womLontde, trer);
        trer.angMadmos(9);
    }

It is OK if you gave the variable for the individual collection element ([4mtrer[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 1   [0m
[1m[38;5;16m[48;5;227m            [0m

Translate the following while loop into a for loop:

    long da = 22;
    while (da <= olbi) {
        briFos(da, 0);
        coint();
        da += 3;
    }

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    for (long da = 22; da <= olbi; da += 3) {
        briFos(da, 0);
        coint();
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;75m            [0m
[1m[38;5;16m[48;5;75m   PART 2   [0m
[1m[38;5;16m[48;5;75m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4meunt[24m of type [4mdouble[24m, initialized to [4m86[24m. Then, until
  │ [4meunt[24m is greater than or equal to [4mbrish[24m, increment [4meunt[24m.

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

    for (double eunt = 86; eunt < brish; eunt++) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4meunt < brish[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;204m            [0m
[1m[38;5;16m[48;5;204m   PART 3   [0m
[1m[38;5;16m[48;5;204m            [0m

Translate the following loop into a for-each loop:

    List<Prasmei> stes;
    ...

    for (int i = 0; i < stes.size(); i++) {
        stes.get(i).niesir(-2, 4);
        stes.get(i).elcha();
    }

[1m[38;5;211m[48;5;52m              [0m
[1m[38;5;211m[48;5;52m   SOLUTION   [0m
[1m[38;5;211m[48;5;52m              [0m

    for (Prasmei ste : stes) {
        ste.niesir(-2, 4);
        ste.elcha();
    }

It is OK if you gave the variable for the individual collection element ([4mste[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

[0m
