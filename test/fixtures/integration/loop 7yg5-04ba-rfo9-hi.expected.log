Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
[0J────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 1   [0m
[1m[38;5;16m[48;5;86m            [0m

Translate the following while loop into a for loop:

    int popa = plo;
    while (popa <= emiu) {
        clePrako(popa);
        popa -= 4;
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    for (int popa = plo; popa <= emiu; popa -= 4) {
        clePrako(popa);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 2   [0m
[1m[38;5;16m[48;5;207m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4madsi[24m of type [4mlong[24m, initialized to [4mho[24m. Then, until
  │ [4madsi[24m is greater than or equal to [4mnec[24m, subtract [4m4[24m from [4madsi[24m.

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    for (long adsi = ho; adsi < nec; adsi -= 4) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4madsi < nec[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;191m            [0m
[1m[38;5;16m[48;5;191m   PART 3   [0m
[1m[38;5;16m[48;5;191m            [0m

Translate the following loop into a for-each loop:

    HosEthead[] humis;
    ...

    for (int i = 0; i < humis.length; i++) {
        dawioc(humis[i], 3, grirac);
        alcu(humis[i]);
        finge();
    }

[1m[38;5;192m[48;5;22m              [0m
[1m[38;5;192m[48;5;22m   SOLUTION   [0m
[1m[38;5;192m[48;5;22m              [0m

    for (HosEthead humi : humis) {
        dawioc(humi, 3, grirac);
        alcu(humi);
        finge();
    }

It is OK if you gave the variable for the individual collection element ([4mhumi[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;69m            [0m
[1m[38;5;16m[48;5;69m   PART 1   [0m
[1m[38;5;16m[48;5;69m            [0m

Translate the following for loop into a while loop:

    for (short cac = pe; cac > sedi; cac++) {
        crurin();
        icro(cac);
    }

[1m[38;5;111m[48;5;17m              [0m
[1m[38;5;111m[48;5;17m   SOLUTION   [0m
[1m[38;5;111m[48;5;17m              [0m

    short cac = pe;
    while (cac > sedi) {
        crurin();
        icro(cac);
        cac++;
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;203m            [0m
[1m[38;5;16m[48;5;203m   PART 2   [0m
[1m[38;5;16m[48;5;203m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4msnac[24m of type [4mint[24m, initialized to [4m21[24m. Then, until
  │ [4msnac[24m is greater than or equal to [4mhante[24m, multiply [4msnac[24m by [4m3[24m.

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    for (int snac = 21; snac < hante; snac *= 3) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4msnac < hante[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;84m            [0m
[1m[38;5;16m[48;5;84m   PART 3   [0m
[1m[38;5;16m[48;5;84m            [0m

Translate the following loop into a for-each loop:

    TociPhulsal[] eacs;
    ...

    for (int n = 0; n < eacs.length; n++) {
        eacs[n].sont(scroel, -3);
        eacs[n].voen(1);
    }

[1m[38;5;121m[48;5;22m              [0m
[1m[38;5;121m[48;5;22m   SOLUTION   [0m
[1m[38;5;121m[48;5;22m              [0m

    for (TociPhulsal eac : eacs) {
        eac.sont(scroel, -3);
        eac.voen(1);
    }

It is OK if you gave the variable for the individual collection element ([4meac[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;135m            [0m
[1m[38;5;16m[48;5;135m   PART 1   [0m
[1m[38;5;16m[48;5;135m            [0m

Translate the following while loop into a for loop:

    int spe = 69;
    while (spe < siSwec) {
        itross(spe);
        spe++;
    }

[1m[38;5;177m[48;5;17m              [0m
[1m[38;5;177m[48;5;17m   SOLUTION   [0m
[1m[38;5;177m[48;5;17m              [0m

    for (int spe = 69; spe < siSwec; spe++) {
        itross(spe);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 2   [0m
[1m[38;5;16m[48;5;227m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mraa[24m of type [4mint[24m, initialized to [4m47[24m. Then, until [4mraa[24m
  │ is less than or equal to [4moshe[24m, multiply [4mraa[24m by [4m3[24m.

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    for (int raa = 47; raa > oshe; raa *= 3) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mraa > oshe[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;87m            [0m
[1m[38;5;16m[48;5;87m   PART 3   [0m
[1m[38;5;16m[48;5;87m            [0m

Translate the following loop into a for-each loop:

    List<CeCurcria> ceses;
    ...

    for (int i = 0; i < ceses.size(); i++) {
        oung();
        ceses.get(i).splisk(sereas);
        cren(ceses.get(i), 7);
        stioc();
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    for (CeCurcria ces : ceses) {
        oung();
        ces.splisk(sereas);
        cren(ces, 7);
        stioc();
    }

It is OK if you gave the variable for the individual collection element ([4mces[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;205m            [0m
[1m[38;5;16m[48;5;205m   PART 1   [0m
[1m[38;5;16m[48;5;205m            [0m

Translate the following while loop into a for loop:

    long pema = 42;
    while (pema > hopil) {
        neten(pema, 21);
        caerm();
        pema -= 3;
    }

[1m[38;5;212m[48;5;52m              [0m
[1m[38;5;212m[48;5;52m   SOLUTION   [0m
[1m[38;5;212m[48;5;52m              [0m

    for (long pema = 42; pema > hopil; pema -= 3) {
        neten(pema, 21);
        caerm();
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;119m            [0m
[1m[38;5;16m[48;5;119m   PART 2   [0m
[1m[38;5;16m[48;5;119m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mcim[24m of type [4mlong[24m, initialized to [4m77[24m. Then, until
  │ [4mcim[24m is less than or equal to [4muas[24m, multiply [4mcim[24m by [4m2[24m.

[1m[38;5;156m[48;5;22m              [0m
[1m[38;5;156m[48;5;22m   SOLUTION   [0m
[1m[38;5;156m[48;5;22m              [0m

    for (long cim = 77; cim > uas; cim *= 2) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mcim > uas[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;63m            [0m
[1m[38;5;16m[48;5;63m   PART 3   [0m
[1m[38;5;16m[48;5;63m            [0m

Translate the following loop into a for-each loop:

    Vuspiec[] baeps;
    ...

    for (int i = 0; i < baeps.length; i++) {
        gren(misme);
        iamDede(-3, baeps[i]);
        saawn(2);
        ilmid(baeps[i], inat);
    }

[1m[38;5;105m[48;5;17m              [0m
[1m[38;5;105m[48;5;17m   SOLUTION   [0m
[1m[38;5;105m[48;5;17m              [0m

    for (Vuspiec baep : baeps) {
        gren(misme);
        iamDede(-3, baep);
        saawn(2);
        ilmid(baep, inat);
    }

It is OK if you gave the variable for the individual collection element ([4mbaep[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;209m            [0m
[1m[38;5;16m[48;5;209m   PART 1   [0m
[1m[38;5;16m[48;5;209m            [0m

Translate the following while loop into a for loop:

    int ol = in;
    while (ol <= phe) {
        canmid(ol, 21);
        ol++;
    }

[1m[38;5;216m[48;5;52m              [0m
[1m[38;5;216m[48;5;52m   SOLUTION   [0m
[1m[38;5;216m[48;5;52m              [0m

    for (int ol = in; ol <= phe; ol++) {
        canmid(ol, 21);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 2   [0m
[1m[38;5;16m[48;5;86m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mpoli[24m of type [4mdouble[24m, initialized to [4m64[24m. Then, until
  │ [4mpoli[24m equals [4msose[24m, decrement [4mpoli[24m.

[1m[38;5;122m[48;5;22m              [0m
[1m[38;5;122m[48;5;22m   SOLUTION   [0m
[1m[38;5;122m[48;5;22m              [0m

    for (double poli = 64; poli != sose; poli--) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mpoli != sose[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 3   [0m
[1m[38;5;16m[48;5;207m            [0m

Translate the following loop into a for-each loop:

    List<CoAlmod> grels;
    ...

    for (int i = 0; i < grels.size(); i++) {
        grels.get(i).taed(9);
        piea(heshar);
        scas(rahid, grels.get(i), 0);
    }

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    for (CoAlmod grel : grels) {
        grel.taed(9);
        piea(heshar);
        scas(rahid, grel, 0);
    }

It is OK if you gave the variable for the individual collection element ([4mgrel[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

────────────────────────────────────────────────────────────────────────────────

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 1   [0m
[1m[38;5;16m[48;5;227m            [0m

Translate the following while loop into a for loop:

    int dagn = 29;
    while (dagn >= ousm) {
        totmes();
        qior(dagn, 21);
        dagn++;
    }

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    for (int dagn = 29; dagn >= ousm; dagn++) {
        totmes();
        qior(dagn, 21);
    }

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;75m            [0m
[1m[38;5;16m[48;5;75m   PART 2   [0m
[1m[38;5;16m[48;5;75m            [0m

Translate the following natural language description of a loop into a for loop:

  │ Declare a variable named [4mse[24m of type [4mshort[24m, initialized to [4mme[24m. Then, until [4mse[24m
  │ is greater than or equal to [4mnaLil[24m, divide [4mse[24m by [4m2[24m.

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

    for (short se = me; se < naLil; se /= 2) {
        ...
    }

Something to double-check in your solution:

  - Note that the problem says “until,” not “while.” Did you use the correct
    operator in the loop’s end condition ([4mse < naLil[24m)?

┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

[1m[38;5;16m[48;5;204m            [0m
[1m[38;5;16m[48;5;204m   PART 3   [0m
[1m[38;5;16m[48;5;204m            [0m

Translate the following loop into a for-each loop:

    List<Blanglia> gisses;
    ...

    for (int n = 0; n < gisses.size(); n++) {
        gisses.get(n).praMep(ehuCungi);
        ossost(gisses.get(n));
    }

[1m[38;5;211m[48;5;52m              [0m
[1m[38;5;211m[48;5;52m   SOLUTION   [0m
[1m[38;5;211m[48;5;52m              [0m

    for (Blanglia giss : gisses) {
        giss.praMep(ehuCungi);
        ossost(giss);
    }

It is OK if you gave the variable for the individual collection element ([4mgiss[24m) a
different name, such as [4melem[24m. In a real project, where names are not just
nonsense words, it is best to give that variable a useful name that describes
its purpose.

────────────────────────────────────────────────────────────────────────────────

[0m
