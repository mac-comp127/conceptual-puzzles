Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
[0Jâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 1   [0m
[1m[38;5;16m[48;5;86m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (!(is != cang) || roth || eock() > mu || !ru && (coem() < 8 || frehum() != 8)) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        ollTre();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    if (is != cang && !roth && eock() <= mu && (ru || coem() >= 8 && frehum() == 8)) {
        ollTre();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 2   [0m
[1m[38;5;16m[48;5;207m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (il) {
        if (te) {
            return true;
        }
    }
    if (geshbo()) {
        if (pengpi() == 9) {
            return true;
        }
    }
    if (griNuro() < 6) {
        return true;
    }
    if (duss) {
        return true;
    }
    if (assa) {
        return true;
    }
    return false;

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    return il && te || geshbo() && pengpi() == 9 || griNuro() < 6 || duss || assa;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    if (!il) {
        if (!geshbo()) {
            if (griNuro() >= 6) {
                if (!duss) {
                    if (!assa) {
                        return false;
                    }
                }
            }
        }
        if (pengpi() != 9) {
            if (griNuro() >= 6) {
                if (!duss) {
                    if (!assa) {
                        return false;
                    }
                }
            }
        }
    }
    if (!te) {
        if (!geshbo()) {
            if (griNuro() >= 6) {
                if (!duss) {
                    if (!assa) {
                        return false;
                    }
                }
            }
        }
        if (pengpi() != 9) {
            if (griNuro() >= 6) {
                if (!duss) {
                    if (!assa) {
                        return false;
                    }
                }
            }
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;191m            [0m
[1m[38;5;16m[48;5;191m   PART 3   [0m
[1m[38;5;16m[48;5;191m            [0m

Simplify the following messy chain of conditionals:

    if (alge) {
        spho();
    } else if (wism == 4 && !alge) {
        tren();
    }
    if (mur > an && !alge && wism != 4) {
        onhas();
    }
    if (cing == false && !alge && wism != 4 && mur <= an) {
        sagren();
    } else if (a == 4 && !alge && wism != 4 && mur <= an && cing != false) {
        idtrac();
    } else if (a == false && !alge && wism != 4 && mur <= an && cing != false && a != 4) {
        proe();
    }

[1m[38;5;192m[48;5;22m              [0m
[1m[38;5;192m[48;5;22m   SOLUTION   [0m
[1m[38;5;192m[48;5;22m              [0m

    if (alge) {
        spho();
    } else if (wism == 4) {
        tren();
    } else if (mur > an) {
        onhas();
    } else if (!cing) {
        sagren();
    } else if (a == 4) {
        idtrac();
    } else if (!a) {
        proe();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain must end with an [4melse if[24m, not just [4melse[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;69m            [0m
[1m[38;5;16m[48;5;69m   PART 1   [0m
[1m[38;5;16m[48;5;69m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (ed && (tessun() && dass || !spla || eern() || !(niso() != 5))) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        cripoc();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;111m[48;5;17m              [0m
[1m[38;5;111m[48;5;17m   SOLUTION   [0m
[1m[38;5;111m[48;5;17m              [0m

    if (!ed || (!tessun() || !dass) && spla && !eern() && niso() != 5) {
        cripoc();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;203m            [0m
[1m[38;5;16m[48;5;203m   PART 2   [0m
[1m[38;5;16m[48;5;203m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (ju == eepin()) {
        if (muelme()) {
            if (drepse()) {
                if (vass) {
                    if (bi == reo) {
                        return true;
                    }
                }
            }
            if (!e) {
                if (bi == reo) {
                    return true;
                }
            }
        }
        if (ciwTrobzo()) {
            if (drepse()) {
                if (vass) {
                    if (bi == reo) {
                        return true;
                    }
                }
            }
            if (!e) {
                if (bi == reo) {
                    return true;
                }
            }
        }
    }
    return false;

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    return ju == eepin() && (muelme() || ciwTrobzo()) && (drepse() && vass || !e) && bi == reo;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    if (ju != eepin()) {
        return false;
    }
    if (!muelme()) {
        if (!ciwTrobzo()) {
            return false;
        }
    }
    if (!drepse()) {
        if (e) {
            return false;
        }
    }
    if (!vass) {
        if (e) {
            return false;
        }
    }
    if (bi != reo) {
        return false;
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;84m            [0m
[1m[38;5;16m[48;5;84m   PART 3   [0m
[1m[38;5;16m[48;5;84m            [0m

Simplify the following messy chain of conditionals:

    if (cet == false) {
        oirEcpar();
    }
    if (emo == false && cet != false) {
        bistpu();
    } else if (sa == false && cet != false && emo != false) {
        seng();
    } else if (poc == true && cet != false && emo != false && sa != false) {
        cuiRiac();
    }
    if (ke == false && cet != false && emo != false && sa != false && poc != true) {
        auboi();
    } else if (cet != false && emo != false && sa != false && poc != true && ke != false) {
        peiIasm();
    }

[1m[38;5;121m[48;5;22m              [0m
[1m[38;5;121m[48;5;22m   SOLUTION   [0m
[1m[38;5;121m[48;5;22m              [0m

    if (!cet) {
        oirEcpar();
    } else if (!emo) {
        bistpu();
    } else if (!sa) {
        seng();
    } else if (poc) {
        cuiRiac();
    } else if (!ke) {
        auboi();
    } else {
        peiIasm();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain can end with just an [4melse[24m, no final [4mif[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;135m            [0m
[1m[38;5;16m[48;5;135m   PART 1   [0m
[1m[38;5;16m[48;5;135m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if ((umo > 6 || ahec() == 2 && maeche()) && isdu == 4 && (!(arac == 1) || ael != 8)) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        rilToing();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;177m[48;5;17m              [0m
[1m[38;5;177m[48;5;17m   SOLUTION   [0m
[1m[38;5;177m[48;5;17m              [0m

    if (umo <= 6 && (ahec() != 2 || !maeche()) || isdu != 4 || arac == 1 && ael == 8) {
        rilToing();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 2   [0m
[1m[38;5;16m[48;5;227m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (neos != 0) {
        if (ucan()) {
            return true;
        }
    }
    if (bri > di) {
        if (sperir()) {
            return true;
        }
    }
    if (lisdo()) {
        return true;
    }
    if (!pii) {
        return true;
    }
    if (i) {
        return true;
    }
    return false;

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    return neos != 0 && ucan() || bri > di && sperir() || lisdo() || !pii || i;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    if (neos == 0) {
        if (bri <= di) {
            if (!lisdo()) {
                if (pii) {
                    if (!i) {
                        return false;
                    }
                }
            }
        }
        if (!sperir()) {
            if (!lisdo()) {
                if (pii) {
                    if (!i) {
                        return false;
                    }
                }
            }
        }
    }
    if (!ucan()) {
        if (bri <= di) {
            if (!lisdo()) {
                if (pii) {
                    if (!i) {
                        return false;
                    }
                }
            }
        }
        if (!sperir()) {
            if (!lisdo()) {
                if (pii) {
                    if (!i) {
                        return false;
                    }
                }
            }
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;87m            [0m
[1m[38;5;16m[48;5;87m   PART 3   [0m
[1m[38;5;16m[48;5;87m            [0m

Simplify the following messy chain of conditionals:

    if (id != 8) {
        genud();
    }
    if (e == true && id == 8) {
        fewrer();
    } else if (no == true && id == 8 && e != true) {
        ditish();
    } else if (acva == false && id == 8 && e != true && no != true) {
        dedoc();
    } else if ((odou != 9) == true && id == 8 && e != true && no != true && acva != false) {
        shep();
    } else if (id == 8 && e != true && no != true && acva != false && (odou != 9) != true) {
        pidFruai();
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    if (id != 8) {
        genud();
    } else if (e) {
        fewrer();
    } else if (no) {
        ditish();
    } else if (!acva) {
        dedoc();
    } else if (odou != 9) {
        shep();
    } else {
        pidFruai();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain can end with just an [4melse[24m, no final [4mif[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;206m            [0m
[1m[38;5;16m[48;5;206m   PART 1   [0m
[1m[38;5;16m[48;5;206m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (selarm() && (uce && (i || onos) || gosm) && !(ci <= ai)) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        mattid();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;212m[48;5;52m              [0m
[1m[38;5;212m[48;5;52m   SOLUTION   [0m
[1m[38;5;212m[48;5;52m              [0m

    if (!selarm() || (!uce || !i && !onos) && !gosm || ci <= ai) {
        mattid();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;119m            [0m
[1m[38;5;16m[48;5;119m   PART 2   [0m
[1m[38;5;16m[48;5;119m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (e) {
        if (genta()) {
            return true;
        }
    }
    if (be) {
        return true;
    }
    if (oc > daci) {
        if (!a) {
            if (!lef) {
                return true;
            }
        }
        if (bructo() == 2) {
            if (!lef) {
                return true;
            }
        }
    }
    return false;

[1m[38;5;156m[48;5;22m              [0m
[1m[38;5;156m[48;5;22m   SOLUTION   [0m
[1m[38;5;156m[48;5;22m              [0m

    return e && genta() || be || oc > daci && (!a || bructo() == 2) && !lef;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;156m[48;5;22m              [0m
[1m[38;5;156m[48;5;22m   SOLUTION   [0m
[1m[38;5;156m[48;5;22m              [0m

    if (!e) {
        if (!be) {
            if (oc <= daci) {
                return false;
            }
            if (a) {
                if (bructo() != 2) {
                    return false;
                }
            }
            if (lef) {
                return false;
            }
        }
    }
    if (!genta()) {
        if (!be) {
            if (oc <= daci) {
                return false;
            }
            if (a) {
                if (bructo() != 2) {
                    return false;
                }
            }
            if (lef) {
                return false;
            }
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;63m            [0m
[1m[38;5;16m[48;5;63m   PART 3   [0m
[1m[38;5;16m[48;5;63m            [0m

Simplify the following messy chain of conditionals:

    if (gia) {
        meid();
    } else if (on >= re && !gia) {
        wakiss();
    } else if (hi == true && !gia && on < re) {
        fersod();
    }
    if ((miho > 9) == true && !gia && on < re && hi != true) {
        bitri();
    } else if (e >= 1 && !gia && on < re && hi != true && (miho > 9) != true) {
        uerFom();
    }
    if (!gia && on < re && hi != true && (miho > 9) != true && e < 1) {
        dolcin();
    }

[1m[38;5;105m[48;5;17m              [0m
[1m[38;5;105m[48;5;17m   SOLUTION   [0m
[1m[38;5;105m[48;5;17m              [0m

    if (gia) {
        meid();
    } else if (on >= re) {
        wakiss();
    } else if (hi) {
        fersod();
    } else if (miho > 9) {
        bitri();
    } else if (e >= 1) {
        uerFom();
    } else {
        dolcin();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain can end with just an [4melse[24m, no final [4mif[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;209m            [0m
[1m[38;5;16m[48;5;209m   PART 1   [0m
[1m[38;5;16m[48;5;209m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (vech != ufe || !har || !(marto() == mi && prino() > 0 || !whe || edis())) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        ioss();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;216m[48;5;52m              [0m
[1m[38;5;216m[48;5;52m   SOLUTION   [0m
[1m[38;5;216m[48;5;52m              [0m

    if (vech == ufe && har && (marto() == mi && prino() > 0 || !whe || edis())) {
        ioss();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;85m            [0m
[1m[38;5;16m[48;5;85m   PART 2   [0m
[1m[38;5;16m[48;5;85m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (fult) {
        if (geng()) {
            if (saen) {
                if (rhit) {
                    return true;
                }
            }
            if (sasea() != 6) {
                if (rhit) {
                    return true;
                }
            }
            if (!scle) {
                if (e) {
                    if (rhit) {
                        return true;
                    }
                }
            }
        }
    }
    return false;

[1m[38;5;122m[48;5;22m              [0m
[1m[38;5;122m[48;5;22m   SOLUTION   [0m
[1m[38;5;122m[48;5;22m              [0m

    return fult && geng() && (saen || sasea() != 6 || !scle && e) && rhit;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;122m[48;5;22m              [0m
[1m[38;5;122m[48;5;22m   SOLUTION   [0m
[1m[38;5;122m[48;5;22m              [0m

    if (!fult) {
        return false;
    }
    if (!geng()) {
        return false;
    }
    if (!saen) {
        if (sasea() == 6) {
            if (scle) {
                return false;
            }
            if (!e) {
                return false;
            }
        }
    }
    if (!rhit) {
        return false;
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 3   [0m
[1m[38;5;16m[48;5;207m            [0m

Simplify the following messy chain of conditionals:

    if (me == seo) {
        nurfo();
    } else if (e == true && me != seo) {
        kishre();
    } else if (mo == true && me != seo && e != true) {
        kalmo();
    }
    if (a != tio && me != seo && e != true && mo != true) {
        phuood();
    }
    if (pu == true && me != seo && e != true && mo != true && a == tio) {
        uiss();
    } else if (me != seo && e != true && mo != true && a == tio && pu != true) {
        elpann();
    }

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    if (me == seo) {
        nurfo();
    } else if (e) {
        kishre();
    } else if (mo) {
        kalmo();
    } else if (a != tio) {
        phuood();
    } else if (pu) {
        uiss();
    } else {
        elpann();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain can end with just an [4melse[24m, no final [4mif[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 1   [0m
[1m[38;5;16m[48;5;227m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (pi >= siurio() || (ang || oma) && pa > 9 && flik() && iilRoa()) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        clotol();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    if (pi < siurio() && (!ang && !oma || pa <= 9 || !flik() || !iilRoa())) {
        clotol();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;75m            [0m
[1m[38;5;16m[48;5;75m   PART 2   [0m
[1m[38;5;16m[48;5;75m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (le) {
        if (!dous) {
            if (phe != 4) {
                if (tihe != se) {
                    if (asar) {
                        return true;
                    }
                }
            }
            if (bost() < 9) {
                if (steSef()) {
                    if (tihe != se) {
                        if (asar) {
                            return true;
                        }
                    }
                }
            }
        }
    }
    return false;

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

    return le && !dous && (phe != 4 || bost() < 9 && steSef()) && tihe != se && asar;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

    if (!le) {
        return false;
    }
    if (dous) {
        return false;
    }
    if (phe == 4) {
        if (bost() >= 9) {
            return false;
        }
        if (!steSef()) {
            return false;
        }
    }
    if (tihe == se) {
        return false;
    }
    if (!asar) {
        return false;
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;204m            [0m
[1m[38;5;16m[48;5;204m   PART 3   [0m
[1m[38;5;16m[48;5;204m            [0m

Simplify the following messy chain of conditionals:

    if (ent == true) {
        spacma();
    }
    if (ra == false && ent != true) {
        toiae();
    } else if (i == false && ent != true && ra != false) {
        husChif();
    } else if (co == false && ent != true && ra != false && i != false) {
        sciss();
    }
    if (ecsi == false && ent != true && ra != false && i != false && co != false) {
        temix();
    }
    if (ent != true && ra != false && i != false && co != false && ecsi != false) {
        xerest();
    }

[1m[38;5;211m[48;5;52m              [0m
[1m[38;5;211m[48;5;52m   SOLUTION   [0m
[1m[38;5;211m[48;5;52m              [0m

    if (ent) {
        spacma();
    } else if (!ra) {
        toiae();
    } else if (!i) {
        husChif();
    } else if (!co) {
        sciss();
    } else if (!ecsi) {
        temix();
    } else {
        xerest();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain can end with just an [4melse[24m, no final [4mif[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[0m
***************** PLEASE NOTE ******************
***                                          ***
*** The puzzle above has a difficulty of 5.  ***
*** The difficulty level to get credit is 1. ***
***                                          ***
************************************************

To try the puzzle at the goal difficulty, generate a puzzle without the --difficulty option.

Want to practice more basics first? Try a simpler puzzle:

  bin/puzzle gen bool --difficulty 4

Want a bigger challenge? Try a harder difficulty level:

  bin/puzzle gen bool --difficulty 6

