Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
[0Jâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;86m            [0m
[1m[38;5;16m[48;5;86m   PART 1   [0m
[1m[38;5;16m[48;5;86m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if ((eia == 3 || dai) && (coem() < 8 || agne() != 8 || !(rapran() && !ru))) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        pecWongu();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    if (eia != 3 && !dai || coem() >= 8 && agne() == 8 && rapran() && !ru) {
        pecWongu();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 2   [0m
[1m[38;5;16m[48;5;207m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (piru < 7) {
        if (tedqam()) {
            if (mape) {
                if (wism == 4) {
                    return true;
                }
                if (!spho) {
                    return true;
                }
            }
        }
        if (us > kasos()) {
            if (wism == 4) {
                return true;
            }
            if (!spho) {
                return true;
            }
        }
        if (!bli) {
            if (wism == 4) {
                return true;
            }
            if (!spho) {
                return true;
            }
        }
    }
    return false;

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    return piru < 7 && (tedqam() && mape || us > kasos() || !bli) && (wism == 4 || !spho);

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    if (piru >= 7) {
        return false;
    }
    if (!tedqam()) {
        if (us <= kasos()) {
            if (bli) {
                return false;
            }
        }
    }
    if (!mape) {
        if (us <= kasos()) {
            if (bli) {
                return false;
            }
        }
    }
    if (wism != 4) {
        if (spho) {
            return false;
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;191m            [0m
[1m[38;5;16m[48;5;191m   PART 3   [0m
[1m[38;5;16m[48;5;191m            [0m

Simplify the following messy chain of conditionals:

    if (id == mur) {
        gocGuposs();
    }
    if (ul == false && id != mur) {
        hilPece();
    } else if (!me && id != mur && ul != false) {
        frica();
    } else if (somi == true && id != mur && ul != false && me) {
        vutlan();
    }
    if (cas == true && id != mur && ul != false && me && somi != true) {
        mecgal();
    }
    if (os == false && id != mur && ul != false && me && somi != true && cas != true) {
        godur();
    }

[1m[38;5;192m[48;5;22m              [0m
[1m[38;5;192m[48;5;22m   SOLUTION   [0m
[1m[38;5;192m[48;5;22m              [0m

    if (id == mur) {
        gocGuposs();
    } else if (!ul) {
        hilPece();
    } else if (!me) {
        frica();
    } else if (somi) {
        vutlan();
    } else if (cas) {
        mecgal();
    } else if (!os) {
        godur();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain must end with an [4melse if[24m, not just [4melse[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;69m            [0m
[1m[38;5;16m[48;5;69m   PART 1   [0m
[1m[38;5;16m[48;5;69m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if ((!sas || !(pocpar() && vean != acsi && ni >= 0 && priu)) && !ce) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        chisca();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;111m[48;5;17m              [0m
[1m[38;5;111m[48;5;17m   SOLUTION   [0m
[1m[38;5;111m[48;5;17m              [0m

    if (sas && pocpar() && vean != acsi && ni >= 0 && priu || ce) {
        chisca();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;203m            [0m
[1m[38;5;16m[48;5;203m   PART 2   [0m
[1m[38;5;16m[48;5;203m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (ondel()) {
        if (rasick()) {
            if (niec >= 9) {
                if (!el) {
                    return true;
                }
                if (!emin) {
                    if (draee()) {
                        return true;
                    }
                }
                if (tism()) {
                    return true;
                }
            }
        }
    }
    return false;

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    return ondel() && rasick() && niec >= 9 && (!el || !emin && draee() || tism());

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    if (!ondel()) {
        return false;
    }
    if (!rasick()) {
        return false;
    }
    if (niec < 9) {
        return false;
    }
    if (el) {
        if (emin) {
            if (!tism()) {
                return false;
            }
        }
        if (!draee()) {
            if (!tism()) {
                return false;
            }
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;84m            [0m
[1m[38;5;16m[48;5;84m   PART 3   [0m
[1m[38;5;16m[48;5;84m            [0m

Simplify the following messy chain of conditionals:

    if (ciw == true) {
        duph();
    } else if (vass == false && ciw != true) {
        frio();
    } else if (se && ciw != true && vass != false) {
        roodci();
    }
    if (eled && ciw != true && vass != false && !se) {
        niaith();
    }
    if (pe < 1 && ciw != true && vass != false && !se && !eled) {
        drania();
    }
    if (!em && ciw != true && vass != false && !se && !eled && pe >= 1) {
        tapeab();
    }

[1m[38;5;121m[48;5;22m              [0m
[1m[38;5;121m[48;5;22m   SOLUTION   [0m
[1m[38;5;121m[48;5;22m              [0m

    if (ciw) {
        duph();
    } else if (!vass) {
        frio();
    } else if (se) {
        roodci();
    } else if (eled) {
        niaith();
    } else if (pe < 1) {
        drania();
    } else if (!em) {
        tapeab();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain must end with an [4melse if[24m, not just [4melse[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;135m            [0m
[1m[38;5;16m[48;5;135m   PART 1   [0m
[1m[38;5;16m[48;5;135m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (mokmos() == 0 && swaod() && (lo == 1 || stal()) && auboi() && !ael) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        prent();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;177m[48;5;17m              [0m
[1m[38;5;177m[48;5;17m   SOLUTION   [0m
[1m[38;5;177m[48;5;17m              [0m

    if (mokmos() != 0 || !swaod() || lo != 1 && !stal() || !auboi() || ael) {
        prent();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 2   [0m
[1m[38;5;16m[48;5;227m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (!ehi) {
        if (sperir()) {
            if (bozEksaen() < 9) {
                return true;
            }
            if (cece > maraic()) {
                return true;
            }
            if (aent > o) {
                return true;
            }
            if (kepii()) {
                return true;
            }
        }
    }
    if (i) {
        if (sperir()) {
            if (bozEksaen() < 9) {
                return true;
            }
            if (cece > maraic()) {
                return true;
            }
            if (aent > o) {
                return true;
            }
            if (kepii()) {
                return true;
            }
        }
    }
    return false;

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    return (!ehi || i) && sperir() && (bozEksaen() < 9 || cece > maraic() || aent > o || kepii());

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    if (ehi) {
        if (!i) {
            return false;
        }
    }
    if (!sperir()) {
        return false;
    }
    if (bozEksaen() >= 9) {
        if (cece <= maraic()) {
            if (aent <= o) {
                if (!kepii()) {
                    return false;
                }
            }
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;87m            [0m
[1m[38;5;16m[48;5;87m   PART 3   [0m
[1m[38;5;16m[48;5;87m            [0m

Simplify the following messy chain of conditionals:

    if (cick <= 9) {
        seldes();
    } else if (hudi == true && cick > 9) {
        genud();
    }
    if (e && cick > 9 && hudi != true) {
        fewrer();
    } else if (no == true && cick > 9 && hudi != true && !e) {
        ditish();
    }
    if (!acva && cick > 9 && hudi != true && !e && no != true) {
        dedoc();
    }
    if (cick > 9 && hudi != true && !e && no != true && acva) {
        trai();
    }

[1m[38;5;123m[48;5;23m              [0m
[1m[38;5;123m[48;5;23m   SOLUTION   [0m
[1m[38;5;123m[48;5;23m              [0m

    if (cick <= 9) {
        seldes();
    } else if (hudi) {
        genud();
    } else if (e) {
        fewrer();
    } else if (no) {
        ditish();
    } else if (!acva) {
        dedoc();
    } else {
        trai();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain can end with just an [4melse[24m, no final [4mif[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;206m            [0m
[1m[38;5;16m[48;5;206m   PART 1   [0m
[1m[38;5;16m[48;5;206m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if ((pi == 2 || tu || fu) && !(!wred && (la || !un))) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        aront();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;212m[48;5;52m              [0m
[1m[38;5;212m[48;5;52m   SOLUTION   [0m
[1m[38;5;212m[48;5;52m              [0m

    if (pi != 2 && !tu && !fu || !wred && (la || !un)) {
        aront();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;119m            [0m
[1m[38;5;16m[48;5;119m   PART 2   [0m
[1m[38;5;16m[48;5;119m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (genta()) {
        return true;
    }
    if (meir() >= 3) {
        if (strink()) {
            return true;
        }
        if (su) {
            return true;
        }
    }
    if (!daci) {
        if (psit() == we) {
            return true;
        }
    }
    if (bructo() == 2) {
        return true;
    }
    return false;

[1m[38;5;156m[48;5;22m              [0m
[1m[38;5;156m[48;5;22m   SOLUTION   [0m
[1m[38;5;156m[48;5;22m              [0m

    return genta() || meir() >= 3 && (strink() || su) || !daci && psit() == we || bructo() == 2;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;156m[48;5;22m              [0m
[1m[38;5;156m[48;5;22m   SOLUTION   [0m
[1m[38;5;156m[48;5;22m              [0m

    if (!genta()) {
        if (meir() < 3) {
            if (daci) {
                if (bructo() != 2) {
                    return false;
                }
            }
            if (psit() != we) {
                if (bructo() != 2) {
                    return false;
                }
            }
        }
        if (!strink()) {
            if (!su) {
                if (daci) {
                    if (bructo() != 2) {
                        return false;
                    }
                }
                if (psit() != we) {
                    if (bructo() != 2) {
                        return false;
                    }
                }
            }
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;63m            [0m
[1m[38;5;16m[48;5;63m   PART 3   [0m
[1m[38;5;16m[48;5;63m            [0m

Simplify the following messy chain of conditionals:

    if (steo == true) {
        priSpioin();
    } else if (phe == 6 && steo != true) {
        ghec();
    } else if (lef == false && steo != true && phe != 6) {
        ishi();
    }
    if (pula == true && steo != true && phe != 6 && lef != false) {
        daspas();
    } else if (ei == a && steo != true && phe != 6 && lef != false && pula != true) {
        canba();
    }
    if (steo != true && phe != 6 && lef != false && pula != true && ei != a) {
        driHousa();
    }

[1m[38;5;105m[48;5;17m              [0m
[1m[38;5;105m[48;5;17m   SOLUTION   [0m
[1m[38;5;105m[48;5;17m              [0m

    if (steo) {
        priSpioin();
    } else if (phe == 6) {
        ghec();
    } else if (!lef) {
        ishi();
    } else if (pula) {
        daspas();
    } else if (ei == a) {
        canba();
    } else {
        driHousa();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain can end with just an [4melse[24m, no final [4mif[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;209m            [0m
[1m[38;5;16m[48;5;209m   PART 1   [0m
[1m[38;5;16m[48;5;209m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (!(besm && fom && fiabre() > 0) && seang() && (scre() == 8 || merm > 3)) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        prur();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;216m[48;5;52m              [0m
[1m[38;5;216m[48;5;52m   SOLUTION   [0m
[1m[38;5;216m[48;5;52m              [0m

    if (besm && fom && fiabre() > 0 || !seang() || scre() != 8 && merm <= 3) {
        prur();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;85m            [0m
[1m[38;5;16m[48;5;85m   PART 2   [0m
[1m[38;5;16m[48;5;85m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (har) {
        if (traip() < 7) {
            if (hocpan()) {
                if (thol == osfiac()) {
                    if (hedu) {
                        return true;
                    }
                    if (lal) {
                        return true;
                    }
                }
            }
        }
    }
    if (husils() == 0) {
        if (traip() < 7) {
            if (hocpan()) {
                if (thol == osfiac()) {
                    if (hedu) {
                        return true;
                    }
                    if (lal) {
                        return true;
                    }
                }
            }
        }
    }
    return false;

[1m[38;5;122m[48;5;22m              [0m
[1m[38;5;122m[48;5;22m   SOLUTION   [0m
[1m[38;5;122m[48;5;22m              [0m

    return (har || husils() == 0) && traip() < 7 && hocpan() && thol == osfiac() && (hedu || lal);

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;122m[48;5;22m              [0m
[1m[38;5;122m[48;5;22m   SOLUTION   [0m
[1m[38;5;122m[48;5;22m              [0m

    if (!har) {
        if (husils() != 0) {
            return false;
        }
    }
    if (traip() >= 7) {
        return false;
    }
    if (!hocpan()) {
        return false;
    }
    if (thol != osfiac()) {
        return false;
    }
    if (!hedu) {
        if (!lal) {
            return false;
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;207m            [0m
[1m[38;5;16m[48;5;207m   PART 3   [0m
[1m[38;5;16m[48;5;207m            [0m

Simplify the following messy chain of conditionals:

    if (co == false) {
        ricleo();
    }
    if (ceid == false && co != false) {
        hipral();
    } else if (i == false && co != false && ceid != false) {
        ifing();
    } else if (ri == false && co != false && ceid != false && i != false) {
        fodem();
    }
    if (fult == true && co != false && ceid != false && i != false && ri != false) {
        geng();
    }
    if (pemo == true && co != false && ceid != false && i != false && ri != false && fult != true) {
        cuhe();
    }

[1m[38;5;213m[48;5;53m              [0m
[1m[38;5;213m[48;5;53m   SOLUTION   [0m
[1m[38;5;213m[48;5;53m              [0m

    if (!co) {
        ricleo();
    } else if (!ceid) {
        hipral();
    } else if (!i) {
        ifing();
    } else if (!ri) {
        fodem();
    } else if (fult) {
        geng();
    } else if (pemo) {
        cuhe();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain must end with an [4melse if[24m, not just [4melse[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;227m            [0m
[1m[38;5;16m[48;5;227m   PART 1   [0m
[1m[38;5;16m[48;5;227m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (soid() && tersa() || !(gans >= 9 && (sto <= 3 || auni == te) && suntio())) {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    } else {
        enho();
    }

Improve readability by refactoring this conditional so that its [1mtwo clauses are
swapped[22m: what is now the second clause (the [4melse[24m clause) comes first, and the
first clause comes second.

[1m[38;5;228m[48;5;58m              [0m
[1m[38;5;228m[48;5;58m   SOLUTION   [0m
[1m[38;5;228m[48;5;58m              [0m

    if ((!soid() || !tersa()) && gans >= 9 && (sto <= 3 || auni == te) && suntio()) {
        enho();
    } else {
        ...
        ...
        // Pretend there is lots of code here
        ...
        ...
    }

Things to double-check in your solution:

  - Do not just negate the condition by wrapping it all in a [1mnot[22m operator like
    this: [4m!(...)[24m Instead, make sure you negate the condition by changing each
    part of it.
  - You do not actually have to write out the words [4mPretend there is lots of
    code here[24m when you write out your solution! Just draw three dots; thatâ€™s
    enough.

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;75m            [0m
[1m[38;5;16m[48;5;75m   PART 2   [0m
[1m[38;5;16m[48;5;75m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (an) {
        if (glo > 5) {
            if (reod()) {
                if (!oi) {
                    if (bre) {
                        return true;
                    }
                }
            }
            if (piphde()) {
                if (jas) {
                    if (bre) {
                        return true;
                    }
                }
            }
        }
    }
    return false;

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

    return an && glo > 5 && (reod() && !oi || piphde() && jas) && bre;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;117m[48;5;17m              [0m
[1m[38;5;117m[48;5;17m   SOLUTION   [0m
[1m[38;5;117m[48;5;17m              [0m

    if (!an) {
        return false;
    }
    if (glo <= 5) {
        return false;
    }
    if (!reod()) {
        if (!piphde()) {
            return false;
        }
        if (!jas) {
            return false;
        }
    }
    if (oi) {
        if (!piphde()) {
            return false;
        }
        if (!jas) {
            return false;
        }
    }
    if (!bre) {
        return false;
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;204m            [0m
[1m[38;5;16m[48;5;204m   PART 3   [0m
[1m[38;5;16m[48;5;204m            [0m

Simplify the following messy chain of conditionals:

    if (!wo) {
        angtu();
    }
    if (a == true && wo) {
        inaUsta();
    } else if (asar == 2 && wo && a != true) {
        hesh();
    }
    if (ipla == false && wo && a != true && asar != 2) {
        careck();
    } else if (sef == true && wo && a != true && asar != 2 && ipla != false) {
        urtSqat();
    } else if (osme && wo && a != true && asar != 2 && ipla != false && sef != true) {
        rosshi();
    }

[1m[38;5;211m[48;5;52m              [0m
[1m[38;5;211m[48;5;52m   SOLUTION   [0m
[1m[38;5;211m[48;5;52m              [0m

    if (!wo) {
        angtu();
    } else if (a) {
        inaUsta();
    } else if (asar == 2) {
        hesh();
    } else if (!ipla) {
        careck();
    } else if (sef) {
        urtSqat();
    } else if (osme) {
        rosshi();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain must end with an [4melse if[24m, not just [4melse[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[0m
***************** PLEASE NOTE ******************
***                                          ***
*** The puzzle above has a difficulty of 5.  ***
*** The difficulty level to get credit is 1. ***
***                                          ***
************************************************

To try the puzzle at the goal difficulty, generate a puzzle without the --difficulty option.

Want to practice more basics first? Try a simpler puzzle:

  bin/puzzle gen bool --difficulty 4

Want a bigger challenge? Try a harder difficulty level:

  bin/puzzle gen bool --difficulty 6

