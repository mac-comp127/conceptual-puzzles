[0Jâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[1m[38;5;16m[48;5;203m            [0m
[1m[38;5;16m[48;5;203m   PART 1   [0m
[1m[38;5;16m[48;5;203m            [0m

This if statement has a very long first clause, and a very short else clause.
This makes it hard to read: the tiny else clause is so far from the condition,
itâ€™s hard to figure out what the [4melse[24m refers to!

    if (nenSes() || !ilop) {
        ...
        // Lots of code here
        ...
    } else {
        herSca();
    }

Improve readability by refactoring this conditional so that what is now the else
clause comes first, and the first clause comes second.

[1m[38;5;210m[48;5;52m              [0m
[1m[38;5;210m[48;5;52m   SOLUTION   [0m
[1m[38;5;210m[48;5;52m              [0m

    if (!nenSes() && ilop) {
        herSca();
    } else {
        ...
        // Lots of code here
        ...
    }

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;84m            [0m
[1m[38;5;16m[48;5;84m   PART 2   [0m
[1m[38;5;16m[48;5;84m            [0m

Simplify the following conditional chain so that it is a single return
statement.

    if (phio()) {
        return true;
    }
    if (lavus()) {
        if (catra()) {
            return true;
        }
    }
    return false;

[1m[38;5;121m[48;5;22m              [0m
[1m[38;5;121m[48;5;22m   SOLUTION   [0m
[1m[38;5;121m[48;5;22m              [0m

    return phio() || lavus() && catra();

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

Bonus challenge: rewrite the if/else chain above so that instead of consisting
of many [4mreturn true;[24m statements with one [4mreturn false;[24m at the end, it has many
[4mreturn false;[24m statements with one [4mreturn true;[24m at the end.

[1m[38;5;121m[48;5;22m              [0m
[1m[38;5;121m[48;5;22m   SOLUTION   [0m
[1m[38;5;121m[48;5;22m              [0m

    if (!phio()) {
        if (!lavus()) {
            return false;
        }
        if (!catra()) {
            return false;
        }
    }
    return true;

â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„

[1m[38;5;16m[48;5;171m            [0m
[1m[38;5;16m[48;5;171m   PART 3   [0m
[1m[38;5;16m[48;5;171m            [0m

Simplify the following messy chain of conditionals:

    if (psal > e) {
        eenIntnuc();
    } else if (eu == true && psal <= e) {
        nilda();
    }

[1m[38;5;177m[48;5;17m              [0m
[1m[38;5;177m[48;5;17m   SOLUTION   [0m
[1m[38;5;177m[48;5;17m              [0m

    if (psal > e) {
        eenIntnuc();
    } else if (eu) {
        nilda();
    }

Things to double-check in your solution:

  - Did you remove / simplify all the [4m== true[24m and [4m== false[24m checks?
  - This particular conditional chain must end with an [4melse if[24m, not just [4melse[24m.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

[0m
Want to practice more basics first? Try a simpler puzzle:

  puzzle gen bool --difficulty 0

Want a bigger challenge? Try a harder difficulty level:

  puzzle gen bool --difficulty 2

