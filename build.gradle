plugins {
    id 'java'
    id 'eclipse'
    id 'com.gorylenko.gradle-git-properties' version "2.+"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation group: 'com.github.javaparser', name: 'javaparser-symbol-solver-core', version: '3.23.+'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.+'
    implementation group: 'org.jooq', name: 'joor', version: '0.9.+'
    implementation group: 'com.github.mac-comp127', name: 'kilt-graphics', version: 'main-SNAPSHOT'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.9.+'
    testImplementation group: 'io.github.java-diff-utils', name: 'java-diff-utils', version: '4.12'
}

test {
    useJUnitPlatform()
}

[
    'run-cli':   'edu.macalester.conceptual.cli.CommandLine',
    'print-ast': 'edu.macalester.conceptual.util.AstPrinter'
].each { taskName, mainClassName ->
    task(taskName, dependsOn: 'classes', type: JavaExec) {
        mainClass = mainClassName
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = java.toolchain.languageVersion
        }
    }
}

sourceSets.main.java.srcDirs = ['src']
sourceSets.main.resources.srcDirs = ['res']
sourceSets.test.java.srcDirs = ['test']

gitProperties {
    dateFormat = "yyyy-MM-dd HH:mm:ss z"
}

// Nonsense workaround to keep VS Code Java from putting all of its class files
// in bin/ (where the CLI lives) instead of build/ (where they belong, and where
// both Gradle and IntelliJ manage to put them)
// Adapted from https://github.com/gradle/gradle/issues/3839#issuecomment-512805239
project.buildDir = 'build'
eclipse.classpath {
    defaultOutputDir = file('build')
    file.whenMerged {
        cp -> {
            cp.entries.forEach {
                entry -> if (entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', 'build/')
                }
            }
            cp.entries.unique(true)
        }
    }
}
